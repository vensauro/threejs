"use strict";

require("./styles.css");

var _three = require("three");

var _GLTFLoader = require("three/examples/jsm/loaders/GLTFLoader");

var _scene = _interopRequireDefault(require("url:./viking_room/scene.gltf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeCamera() {
  const camera = new _three.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 5000);
  camera.position.z = 10;
  return camera;
}

function makeLights() {
  const hlight = new _three.AmbientLight(0x404040, 100);
  const directionalLight = new _three.DirectionalLight(0xffffff, 100);
  directionalLight.position.set(0, 1, 0);
  directionalLight.castShadow = true;
  const light = new _three.PointLight(0xc4c4c4, 10);
  light.position.set(0, 300, 500);
  const light2 = new _three.PointLight(0xc4c4c4, 10);
  light2.position.set(500, 100, 0);
  const light3 = new _three.PointLight(0xc4c4c4, 10);
  light3.position.set(0, 100, -500);
  const light4 = new _three.PointLight(0xc4c4c4, 10);
  light4.position.set(-500, 300, 500);
  return {
    hlight,
    directionalLight,
    light,
    light2,
    light3,
    light4
  };
}

function init() {
  const camera = makeCamera();
  const scene = new _three.Scene();
  scene.background = new _three.Color(0xffffff);
  Object.values(makeLights()).forEach(light => scene.add(light));
  const renderer = new _three.WebGLRenderer({
    antialias: true
  });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.getElementById("app").appendChild(renderer.domElement);
  return {
    camera,
    scene,
    renderer
  };
}

function animate({
  renderer,
  scene,
  camera
}, animation) {
  requestAnimationFrame(animate);
  animation({
    renderer,
    scene,
    camera
  });
  renderer.render(scene, camera);
}

const {
  camera,
  renderer,
  scene
} = init();
const loader = new _GLTFLoader.GLTFLoader();
loader.load(_scene.default, gltf => {
  const modelObj = gltf.scene.children[0];
  modelObj.scale.set(1, 1, 1);
  scene.add(gltf.scene);
}); // geometry = new BoxGeometry(0.3, 0.3, 0.3);
// material = new MeshNormalMaterial();
// mesh = new Mesh(geometry, material);
// scene.add(mesh);

animate({
  camera,
  renderer,
  scene
}, () => {// mesh.rotation.x += 0.01;
  // mesh.rotation.y += 0.02;
});